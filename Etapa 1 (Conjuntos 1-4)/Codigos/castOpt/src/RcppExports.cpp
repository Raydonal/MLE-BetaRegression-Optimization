// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// Ackleys
void Ackleys(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Ackleys(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Ackleys(sum, x, N);
    return R_NilValue;
END_RCPP
}
// AluffiPentini
void AluffiPentini(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_AluffiPentini(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    AluffiPentini(sum, x, N);
    return R_NilValue;
END_RCPP
}
// BeckerLago
void BeckerLago(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_BeckerLago(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    BeckerLago(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Bohachevsky1
void Bohachevsky1(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Bohachevsky1(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Bohachevsky1(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Bohachevsky2
void Bohachevsky2(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Bohachevsky2(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Bohachevsky2(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Branin
void Branin(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Branin(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Branin(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Camel3
void Camel3(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Camel3(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Camel3(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Camel6
void Camel6(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Camel6(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Camel6(sum, x, N);
    return R_NilValue;
END_RCPP
}
// CosMix2
void CosMix2(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_CosMix2(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    CosMix2(sum, x, N);
    return R_NilValue;
END_RCPP
}
// CosMix4
void CosMix4(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_CosMix4(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    CosMix4(sum, x, N);
    return R_NilValue;
END_RCPP
}
// DekkersAarts
void DekkersAarts(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_DekkersAarts(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    DekkersAarts(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Easom
void Easom(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Easom(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Easom(sum, x, N);
    return R_NilValue;
END_RCPP
}
// EMichalewicz
void EMichalewicz(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_EMichalewicz(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    EMichalewicz(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Expo
void Expo(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Expo(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Expo(sum, x, N);
    return R_NilValue;
END_RCPP
}
// GoldPrice
void GoldPrice(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_GoldPrice(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    GoldPrice(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Griewank
void Griewank(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Griewank(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Griewank(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Gulf
void Gulf(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Gulf(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Gulf(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Hartman3
void Hartman3(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Hartman3(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Hartman3(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Hartman6
void Hartman6(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Hartman6(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Hartman6(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Hosaki
void Hosaki(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Hosaki(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Hosaki(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Kowalik
void Kowalik(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Kowalik(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Kowalik(sum, x, N);
    return R_NilValue;
END_RCPP
}
// LM1
void LM1(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_LM1(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    LM1(sum, x, N);
    return R_NilValue;
END_RCPP
}
// LM2n10
void LM2n10(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_LM2n10(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    LM2n10(sum, x, N);
    return R_NilValue;
END_RCPP
}
// LM2n5
void LM2n5(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_LM2n5(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    LM2n5(sum, x, N);
    return R_NilValue;
END_RCPP
}
// McCormic
void McCormic(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_McCormic(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    McCormic(sum, x, N);
    return R_NilValue;
END_RCPP
}
// MeyerRoth
void MeyerRoth(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_MeyerRoth(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    MeyerRoth(sum, x, N);
    return R_NilValue;
END_RCPP
}
// MieleCantrell
void MieleCantrell(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_MieleCantrell(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    MieleCantrell(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Modlangerman
void Modlangerman(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Modlangerman(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Modlangerman(sum, x, N);
    return R_NilValue;
END_RCPP
}
// ModRosenbrock
void ModRosenbrock(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_ModRosenbrock(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    ModRosenbrock(sum, x, N);
    return R_NilValue;
END_RCPP
}
// MultiGauss
void MultiGauss(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_MultiGauss(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    MultiGauss(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Neumaier2
void Neumaier2(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Neumaier2(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Neumaier2(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Neumaier3
void Neumaier3(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Neumaier3(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Neumaier3(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Paviani
void Paviani(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Paviani(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Paviani(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Periodic
void Periodic(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Periodic(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Periodic(sum, x, N);
    return R_NilValue;
END_RCPP
}
// PowellQ
void PowellQ(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_PowellQ(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    PowellQ(sum, x, N);
    return R_NilValue;
END_RCPP
}
// PriceTransistor
void PriceTransistor(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_PriceTransistor(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    PriceTransistor(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Rastrigin
void Rastrigin(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Rastrigin(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Rastrigin(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Rosenbrock
void Rosenbrock(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Rosenbrock(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Rosenbrock(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Salomon
void Salomon(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Salomon(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Salomon(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Schaffer1
void Schaffer1(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Schaffer1(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Schaffer1(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Schaffer2
void Schaffer2(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Schaffer2(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Schaffer2(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Schubert
void Schubert(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Schubert(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Schubert(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Schwefel
void Schwefel(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Schwefel(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Schwefel(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Shekel10
void Shekel10(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Shekel10(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Shekel10(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Shekel5
void Shekel5(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Shekel5(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Shekel5(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Shekel7
void Shekel7(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Shekel7(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Shekel7(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Shekelfox5
void Shekelfox5(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Shekelfox5(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Shekelfox5(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Wood
void Wood(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Wood(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Wood(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Zeldasine10
void Zeldasine10(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Zeldasine10(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Zeldasine10(sum, x, N);
    return R_NilValue;
END_RCPP
}
// Zeldasine20
void Zeldasine20(arma::vec& sum, arma::vec& x, arma::vec& N);
RcppExport SEXP _castOpt_Zeldasine20(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Zeldasine20(sum, x, N);
    return R_NilValue;
END_RCPP
}
// reg_beta
void reg_beta(arma::vec& sum, arma::vec& x, arma::vec& N, arma::mat& data);
RcppExport SEXP _castOpt_reg_beta(SEXP sumSEXP, SEXP xSEXP, SEXP NSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    reg_beta(sum, x, N, data);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_castOpt_Ackleys", (DL_FUNC) &_castOpt_Ackleys, 3},
    {"_castOpt_AluffiPentini", (DL_FUNC) &_castOpt_AluffiPentini, 3},
    {"_castOpt_BeckerLago", (DL_FUNC) &_castOpt_BeckerLago, 3},
    {"_castOpt_Bohachevsky1", (DL_FUNC) &_castOpt_Bohachevsky1, 3},
    {"_castOpt_Bohachevsky2", (DL_FUNC) &_castOpt_Bohachevsky2, 3},
    {"_castOpt_Branin", (DL_FUNC) &_castOpt_Branin, 3},
    {"_castOpt_Camel3", (DL_FUNC) &_castOpt_Camel3, 3},
    {"_castOpt_Camel6", (DL_FUNC) &_castOpt_Camel6, 3},
    {"_castOpt_CosMix2", (DL_FUNC) &_castOpt_CosMix2, 3},
    {"_castOpt_CosMix4", (DL_FUNC) &_castOpt_CosMix4, 3},
    {"_castOpt_DekkersAarts", (DL_FUNC) &_castOpt_DekkersAarts, 3},
    {"_castOpt_Easom", (DL_FUNC) &_castOpt_Easom, 3},
    {"_castOpt_EMichalewicz", (DL_FUNC) &_castOpt_EMichalewicz, 3},
    {"_castOpt_Expo", (DL_FUNC) &_castOpt_Expo, 3},
    {"_castOpt_GoldPrice", (DL_FUNC) &_castOpt_GoldPrice, 3},
    {"_castOpt_Griewank", (DL_FUNC) &_castOpt_Griewank, 3},
    {"_castOpt_Gulf", (DL_FUNC) &_castOpt_Gulf, 3},
    {"_castOpt_Hartman3", (DL_FUNC) &_castOpt_Hartman3, 3},
    {"_castOpt_Hartman6", (DL_FUNC) &_castOpt_Hartman6, 3},
    {"_castOpt_Hosaki", (DL_FUNC) &_castOpt_Hosaki, 3},
    {"_castOpt_Kowalik", (DL_FUNC) &_castOpt_Kowalik, 3},
    {"_castOpt_LM1", (DL_FUNC) &_castOpt_LM1, 3},
    {"_castOpt_LM2n10", (DL_FUNC) &_castOpt_LM2n10, 3},
    {"_castOpt_LM2n5", (DL_FUNC) &_castOpt_LM2n5, 3},
    {"_castOpt_McCormic", (DL_FUNC) &_castOpt_McCormic, 3},
    {"_castOpt_MeyerRoth", (DL_FUNC) &_castOpt_MeyerRoth, 3},
    {"_castOpt_MieleCantrell", (DL_FUNC) &_castOpt_MieleCantrell, 3},
    {"_castOpt_Modlangerman", (DL_FUNC) &_castOpt_Modlangerman, 3},
    {"_castOpt_ModRosenbrock", (DL_FUNC) &_castOpt_ModRosenbrock, 3},
    {"_castOpt_MultiGauss", (DL_FUNC) &_castOpt_MultiGauss, 3},
    {"_castOpt_Neumaier2", (DL_FUNC) &_castOpt_Neumaier2, 3},
    {"_castOpt_Neumaier3", (DL_FUNC) &_castOpt_Neumaier3, 3},
    {"_castOpt_Paviani", (DL_FUNC) &_castOpt_Paviani, 3},
    {"_castOpt_Periodic", (DL_FUNC) &_castOpt_Periodic, 3},
    {"_castOpt_PowellQ", (DL_FUNC) &_castOpt_PowellQ, 3},
    {"_castOpt_PriceTransistor", (DL_FUNC) &_castOpt_PriceTransistor, 3},
    {"_castOpt_Rastrigin", (DL_FUNC) &_castOpt_Rastrigin, 3},
    {"_castOpt_Rosenbrock", (DL_FUNC) &_castOpt_Rosenbrock, 3},
    {"_castOpt_Salomon", (DL_FUNC) &_castOpt_Salomon, 3},
    {"_castOpt_Schaffer1", (DL_FUNC) &_castOpt_Schaffer1, 3},
    {"_castOpt_Schaffer2", (DL_FUNC) &_castOpt_Schaffer2, 3},
    {"_castOpt_Schubert", (DL_FUNC) &_castOpt_Schubert, 3},
    {"_castOpt_Schwefel", (DL_FUNC) &_castOpt_Schwefel, 3},
    {"_castOpt_Shekel10", (DL_FUNC) &_castOpt_Shekel10, 3},
    {"_castOpt_Shekel5", (DL_FUNC) &_castOpt_Shekel5, 3},
    {"_castOpt_Shekel7", (DL_FUNC) &_castOpt_Shekel7, 3},
    {"_castOpt_Shekelfox5", (DL_FUNC) &_castOpt_Shekelfox5, 3},
    {"_castOpt_Wood", (DL_FUNC) &_castOpt_Wood, 3},
    {"_castOpt_Zeldasine10", (DL_FUNC) &_castOpt_Zeldasine10, 3},
    {"_castOpt_Zeldasine20", (DL_FUNC) &_castOpt_Zeldasine20, 3},
    {"_castOpt_reg_beta", (DL_FUNC) &_castOpt_reg_beta, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_castOpt(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
