"MultiGauss", "Neumaier2", "Neumaier3",
"Paviani", "Periodic", "PowellQ",
"PriceTransistor", "Rastrigin",
"Rosenbrock", "Salomon", "Schaffer1",
"Schaffer2", "Schubert", "Schwefel",
"Shekel10", "Shekel5", "Shekel7",
"Shekelfox5",  "Wood", "Zeldasine10",
"Zeldasine20")) {
fnName <- match.arg(fnName)
switch(fnName,
"Ackleys"=list(lower=rep(-35,10),upper=rep(30,10)),
"AluffiPentini"=list(lower=rep(-12,2),upper=rep(10,2)),
"BeckerLago"=list(lower=rep(-12,2),upper=rep(10,2)),
"Bohachevsky1"=list(lower=rep(-55,2),upper=rep(50,2)),
"Bohachevsky2"=list(lower=rep(-55,2),upper=rep(50,2)),
"Branin"=list(lower=c(-5,0),upper=c(10,15)),
"Camel3"=list(lower=rep(-8,2),upper=rep(5,2)),
"Camel6"=list(lower=rep(-8,2),upper=rep(5,2)),
"CosMix2"=list(lower=rep(-2,2),upper=rep(1,2)),
"CosMix4"=list(lower=rep(-2,4),upper=rep(1,4)),
"DekkersAarts"=list(lower=rep(-25,2),upper=rep(20,2)),
"Easom"=list(lower=rep(-12,2),upper=c(10,2)),
"EMichalewicz"=list(lower=rep(0,5),upper=rep(pi,5)),
"Expo"=list(lower=rep(-12,10),upper=rep(10,10)),
"GoldPrice"=list(lower=rep(-3,2),upper=rep(2,2)),
"Griewank"=list(lower=rep(-550,10),upper=rep(500,10)),
"Gulf"=list(lower=c(.1,0,0),upper=c(100,25.6,5)),
"Hartman3"=list(lower=rep(0,3),upper=rep(1,3)),
"Hartman6"=list(lower=rep(0,6),upper=rep(1,6)),
"Hosaki"=list(lower=rep(0,2),upper=c(5,6)),
"Kowalik"=list(lower=rep(0,4),upper=rep(.42,4)),
"LM1"=list(lower=rep(-15,3),upper=rep(10,3)),
"LM2n5"=list(lower=rep(-10,5),upper=rep(5,5)),
"LM2n10"=list(lower=rep(-10,10),upper=rep(5,10)),
"McCormic"=list(lower=c(-1.5,-3),upper=c(4,3)),
"MeyerRoth"=list(lower=rep(-10,3),upper=rep(10,3)),
"MieleCantrell"=list(lower=rep(-1.5,4),upper=rep(1,4)),
"Modlangerman"=list(lower=rep(0,10),upper=rep(10,10)),
"ModRosenbrock"=list(lower=c(-7,-2),upper=c(5,2)),
"MultiGauss"=list(lower=c(-3,-2),upper=c(2,2)),
"Neumaier2"=list(lower=rep(0,4),upper=c(1,2,3,4)),
"Neumaier3"=list(lower=rep(-115,10),upper=rep(100,10)),
"Paviani"=list(lower=rep(2,10),upper=rep(10,10)),
"Periodic"=list(lower=rep(-15,2),upper=rep(10,2)),
"PowellQ"=list(lower=rep(-15,4),upper=rep(10,4)),
"PriceTransistor"=list(lower=rep(0,9),upper=rep(10,9)),
"Rastrigin"=list(lower=rep(-525,10),upper=rep(512,10)),
"Rosenbrock"=list(lower=rep(-40,10),upper=rep(30,10)),
"Salomon"=list(lower=rep(-120,5),upper=rep(100,5)),
"Schaffer1"=list(lower=rep(-120,2),upper=rep(100,2)),
"Schaffer2"=list(lower=rep(-120,2),upper=rep(100,2)),
"Schubert"=list(lower=rep(-15,2),upper=rep(10,2)),
"Schwefel"=list(lower=rep(-500,10),upper=rep(500,10)),
"Shekel10"=list(lower=rep(0,4),upper=rep(10,4)),
"Shekel5"=list(lower=rep(0,4),upper=rep(10,4)),
"Shekel7"=list(lower=rep(0,4),upper=rep(10,4)),
"Shekelfox5"=list(lower=rep(0,5),upper=rep(10,5)),
"Wood"=list(lower=rep(-14,4),upper=rep(10,4)),
"Zeldasine10"=list(lower=rep(0,10),upper=rep(pi,10)),
"Zeldasine20"=list(lower=rep(0,20),upper=rep(pi,20)))
}
getProblemDimen <- function(fnName=c("Ackleys", "AluffiPentini",
"BeckerLago", "Bohachevsky1",
"Bohachevsky2", "Branin", "Camel3",
"Camel6", "CosMix2", "CosMix4",
"DekkersAarts", "Easom", "EMichalewicz",
"Expo", "GoldPrice", "Griewank", "Gulf",
"Hartman3", "Hartman6", "Hosaki", "Kowalik",
"LM1", "LM2n10", "LM2n5", "McCormic",
"MeyerRoth", "MieleCantrell",
"Modlangerman", "ModRosenbrock",
"MultiGauss", "Neumaier2", "Neumaier3",
"Paviani", "Periodic", "PowellQ",
"PriceTransistor", "Rastrigin",
"Rosenbrock", "Salomon", "Schaffer1",
"Schaffer2", "Schubert", "Schwefel",
"Shekel10", "Shekel5", "Shekel7",
"Shekelfox5", "Wood", "Zeldasine10",
"Zeldasine20")) {
fnName <- match.arg(fnName)
length(getDefaultBounds(fnName)$lower)
}
getGlobalOpt <- function(fnName=c("Ackleys", "AluffiPentini",
"BeckerLago", "Bohachevsky1",
"Bohachevsky2", "Branin", "Camel3",
"Camel6", "CosMix2", "CosMix4",
"DekkersAarts", "Easom", "EMichalewicz",
"Expo", "GoldPrice", "Griewank", "Gulf",
"Hartman3", "Hartman6", "Hosaki", "Kowalik",
"LM1", "LM2n10", "LM2n5", "McCormic",
"MeyerRoth", "MieleCantrell",
"Modlangerman", "ModRosenbrock",
"MultiGauss", "Neumaier2", "Neumaier3",
"Paviani", "Periodic", "PowellQ",
"PriceTransistor", "Rastrigin",
"Rosenbrock", "Salomon", "Schaffer1",
"Schaffer2", "Schubert", "Schwefel",
"Shekel10", "Shekel5", "Shekel7",
"Shekelfox5", "Wood", "Zeldasine10",
"Zeldasine20")) {
fnName <- match.arg(fnName)
switch(fnName,
"Ackleys"=0,
"AluffiPentini"=-.3523,
"BeckerLago"=0,
"Bohachevsky1"=0,
"Bohachevsky2"=0,
"Branin"=.3979,
"Camel3"=0,
"Camel6"=-1.0316,
"CosMix2"=-.2,
"CosMix4"=-.4,
"DekkersAarts"=-24776.5183,
"Easom"=-1,
"EMichalewicz"=-4.6877,
"Expo"=-1,
"GoldPrice"=3,
"Griewank"=0,
"Gulf"=0,
"Hartman3"=-3.8628,
"Hartman6"=-3.3224,
"Hosaki"=-2.3458,
"Kowalik"=0.0003,
"LM1"=0,
"LM2n5"=0,
"LM2n10"=0,
"McCormic"=-1.9133,
"MeyerRoth"=4.355628e-05,
"MieleCantrell"=0,
"Modlangerman"=-0.9650,
"ModRosenbrock"=0,
"MultiGauss"=-1.2970,
"Neumaier2"=0,
"Neumaier3"=-210,
"Paviani"=-45.7784,
"Periodic"=0.9000,
"PowellQ"=0,
"PriceTransistor"=0,
"Rastrigin"=0,
"Rosenbrock"=0,
"Salomon"=0,
"Schaffer1"=0,
"Schaffer2"=0,
"Schubert"=-186.7309,
"Schwefel"=-4189.8289,
"Shekel10"=-10.5364,
"Shekel5"=-10.1532,
"Shekel7"=-10.4029,
"Shekelfox5"=-10.4056,
"Wood"=0,
"Zeldasine10"=-3.5000,
"Zeldasine20"=-3.5000)
}
getGlobalOpt(fnName = "Ackleys")
getGlobalOpt(fnName = "Ackleys")
cbind(rep(-35,10),rep(30,10))
runif(1,bounds$lower[1],bounds$upper[1])
apply(cbind(rep(-35,10),rep(30,10)), 1, function(x){runif(1, x[1], x[2])})
par = apply(cbind(rep(-35,10),rep(30,10)), 1, function(x){runif(1, x[1], x[2])})
Ackleys(sum = 0, x = par, N = length(par))
sum
obj = 0
Ackleys(sum = obj, x = par, N = length(par))
obj
Ackleys(sum = 0, x = apply(cbind(rep(-35,10),rep(30,10)), 1, function(x){runif(1, x[1], x[2])}), N = 10)
Ackleys(sum = obj, x = apply(cbind(rep(-35,10),rep(30,10)), 1, function(x){runif(1, x[1], x[2])}), N = 10)
obj
Ackleys(sum = obj, x = apply(cbind(rep(-35,10),rep(30,10)), 1, function(x){runif(1, x[1], x[2])}), N = 10)
obj
library(castOpt)
Ackleys(obj = obj, x = apply(cbind(rep(-35,10),rep(30,10)), 1, function(x){runif(1, x[1], x[2])}), N = 10)
obj
Ackleys(obj = obj, x = apply(cbind(rep(-35,10),rep(30,10)), 1, function(x){runif(1, x[1], x[2])}), N = 10)
Ackleys(obj = obj, x = apply(cbind(rep(-35,10),rep(30,10)), 1, function(x){runif(1, x[1], x[2])}), N = 10)
Ackleys(obj = obj, x = apply(cbind(rep(-35,10),rep(30,10)), 1, function(x){runif(1, x[1], x[2])}), N = 10)
Ackleys(obj = obj, x = apply(cbind(rep(-35,10),rep(30,10)), 1, function(x){runif(1, x[1], x[2])}), N = 10)
Ackleys(obj = obj, x = apply(cbind(rep(-35,10),rep(30,10)), 1, function(x){runif(1, x[1], x[2])}), N = 10)
x
valor = 0
Ackleys(obj = valor, x = apply(cbind(rep(-35,10),rep(30,10)), 1, function(x){runif(1, x[1], x[2])}), N = 10)
valor
library(castOpt)
valor = 0
Ackleys(obj = valor, x = apply(cbind(rep(-35,10),rep(30,10)), 1, function(x){runif(1, x[1], x[2])}), N = 10)
valor
library(castOpt)
library(castOpt)
par = apply(cbind(rep(-35,10),rep(30,10)), 1, function(x){runif(1, x[1], x[2])})
goTest(fnName = "Ackleys", par = par, checkDim = FALSE)
sum
goTest(fnName = "Ackleys", par = par, checkDim = FALSE)
library(castOpt)
goTest(fnName = "Ackleys", par = par, checkDim = FALSE)
goTest(fnName = "Ackleys", par = par, checkDim = FALSE)
Ackleys(obj = valor, x = apply(cbind(rep(-35,10),rep(30,10)), 1, function(x){runif(1, x[1], x[2])}), N = 10)
Ackleys(sum = obj, x = apply(cbind(rep(-35,10),rep(30,10)), 1, function(x){runif(1, x[1], x[2])}), N = 10)
obj
library(castOpt)
par = apply(cbind(rep(-35,10),rep(30,10)), 1, function(x){runif(1, x[1], x[2])})
goTest(fnName = "Ackleys", par = par, checkDim = FALSE)
?do.call
library(castOpt)
goTest(fnName = "Ackleys", par = par, checkDim = FALSE)
Ackleys(sum = obj, x = apply(cbind(rep(-35,10),rep(30,10)), 1, function(x){runif(1, x[1], x[2])}), N = 10)
valor = 0
Ackleys(sum = valor, x = apply(cbind(rep(-35,10),rep(30,10)), 1, function(x){runif(1, x[1], x[2])}), N = 10)
valor
library(castOpt)
Ackleys(sum = obj, x = apply(cbind(rep(-35,10),rep(30,10)), 1, function(x){runif(1, x[1], x[2])}), N = 10)
Ackleys(sum = valor, x = apply(cbind(rep(-35,10),rep(30,10)), 1, function(x){runif(1, x[1], x[2])}), N = 10)
goTest(fnName = "Ackleys", par = par, checkDim = FALSE)
goTest(fnName = "Ackleys", par = par, checkDim = FALSE)
goTest(fnName = "Ackleys", par = par, checkDim = FALSE)
goTest(fnName = "Ackleys", par = par, checkDim = FALSE)
par = apply(cbind(rep(-35,10),rep(30,10)), 1, function(x){runif(1, x[1], x[2])})
goTest(fnName = "Ackleys", par = par, checkDim = FALSE)
pkgnames <- c("GA",
"rgenoud")
install.packages(pkgnames)
install.packages("hydromad", repos="http://hydromad.catchment.org")
install.packages("polynom")
install.packages("car")
install.packages("hydromad", repos="http://hydromad.catchment.org")
require(hydromad)
for(i in pkgnames)
require(i, character.only=TRUE)
objFun <- c("Ackleys", "AluffiPentini", "BeckerLago", "Bohachevsky1",
"Bohachevsky2", "Branin", "Camel3",
"Camel6", "CosMix2", "CosMix4",
"DekkersAarts", "Easom", "EMichalewicz",
"Expo", "GoldPrice", "Griewank", "Gulf",
"Hartman3", "Hartman6", "Kowalik", "LM1",
"LM2n10", "LM2n5", "MeyerRoth",
"MieleCantrell", "Modlangerman",
"ModRosenbrock", "MultiGauss", "Neumaier2",
"Neumaier3", "Paviani", "Periodic",
"PowellQ", "PriceTransistor", "Rastrigin",
"Rosenbrock", "Salomon", "Schaffer1",
"Schaffer2", "Schubert", "Schwefel",
"Shekel10", "Shekel5", "Shekel7",
"Shekelfox5", "Wood", "Zeldasine10",
"Zeldasine20")
funs <- c("ga",
"genoud")
ans <- array(dim=c(length(objFun), length(funs), 100),
dimnames=list(objFun,funs, NULL))
for(i in 1:length(objFun)) {
for(j in 1:100) {
bounds <- getDefaultBounds(objFun[i])
bMat <- cbind(bounds$lower, bounds$upper)
par <- vector()
checkDim <- FALSE
for(ii in 1:length(bounds$lower))
par <- append(par,runif(1,bounds$lower[ii],bounds$upper[ii]))
## ga
goTestMin <- function(...)
-goTest(...)
out <- try(ga(type="real-valued", fitness=goTestMin,
fnName=objFun[i], checkDim=F,
min=bounds$lower, max=bounds$upper, maxiter=245))
if(class(out) == "try-error")
ans[i,"ga",j] <- NA
else
ans[i,"ga",j] <- -out@fitnessValue
## rgenoud
out <- try(genoud(fn=goTest, nvars=length(bounds$lower),
max.generations=11,
Domains = matrix(c(bounds$lower,bounds$upper),ncol=2),
boundary.enforcement=2,
fnName=objFun[i], checkDim=F))
if(class(out) == "try-error")
ans[i,"genoud",j] <- NA
else
ans[i,"genoud",j] <- out$value
## DEoptim
ff <- 10*length(par)
mi <- round(10000/ff)
out <- try(DEoptim(fn=goTest,lower=bounds$lower, upper=bounds$upper,
fnName=objFun[i], checkDim=F,
control=list(itermax=mi)))
if(class(out) == "try-error")
ans[i,"DEoptim",j] <- NA
else
ans[i,"DEoptim",j] <- out$optim$bestval
## soma
out <- try(soma(costFunction=goTest,bounds=list(min=bounds$lower,
max=bounds$upper),
options = list(nMigrations=36),
fnName=objFun[i], checkDim=F))
if(class(out) == "try-error")
ans[i,"soma",j] <- NA
else
ans[i,"soma",j] <- out$cost[out$leader]
##  cmaes
out <- try(cmaes::cma_es(par=par, fn=goTest,
lower=bounds$lower, upper=bounds$upper,
control=list(maxit=1000),
fnName=objFun[i], checkDim=F))
if(class(out) == "try-error")
ans[i,"cma_es",j] <- NA
else
ans[i,"cma_es",j] <- out$value
##  GenSA
out <- try(GenSA(fn=goTest,
lower=bounds$lower, upper=bounds$upper,
control=list(max.call=10000),
fnName=objFun[i], checkDim=F))
if(class(out) == "try-error")
ans[i,"GenSA",j] <- NA
else
ans[i,"GenSA",j] <- out$value
##  pso
out <- try(psoptim(par=par,fn=goTest,
lower=bounds$lower, upper=bounds$upper,
control=list(maxit=835),
fnName=objFun[i], checkDim=F))
if(class(out) == "try-error")
ans[i,"psoptim",j] <- NA
else
ans[i,"psoptim",j] <- out$value
## nloptr crs
out <- try(crs2lm(x0=par, fn=goTest,
lower=bounds$lower, upper=bounds$upper,
maxeval=10000,
fnName=objFun[i], checkDim=F))
if(class(out) == "try-error")
ans[i,"nloptr_crs",j] <- NA
else
ans[i,"nloptr_crs",j] <- out$value
## nloptr stogo
out <- try(stogo(x0=par, fn=goTest,
lower=bounds$lower, upper=bounds$upper,
maxeval=10000,
fnName=objFun[i], checkDim=F))
if(class(out) == "try-error")
ans[i,"nloptr_stogo",j] <- NA
else
ans[i,"nloptr_stogo",j] <- out$value
## nloptr direct_1
out <- try(nloptr(x0=par, eval_f=goTest,
lb=bounds$lower, ub=bounds$upper,
opts=list(algorithm="NLOPT_GN_DIRECT_L",
maxeval=10000),
fnName=objFun[i], checkDim=F))
if(class(out) == "try-error")
ans[i,"nloptr_d_l",j] <- NA
else
ans[i,"nloptr_d_l",j] <- out$objective
## nloptr direct
out <- try(nloptr(x0=par, eval_f=goTest,
lb=bounds$lower, ub=bounds$upper,
opts=list(algorithm="NLOPT_GN_DIRECT",
maxeval=10000),
fnName=objFun[i], checkDim=F))
if(class(out) == "try-error")
ans[i,"nloptr_d",j] <- NA
else
ans[i,"nloptr_d",j] <- out$objective
## nloptr isres
out <- try(nloptr(x0=par, eval_f=goTest,
lb=bounds$lower, ub=bounds$upper,
opts=list(algorithm="NLOPT_GN_ISRES",
maxeval=10000),
fnName=objFun[i], checkDim=F))
if(class(out) == "try-error")
ans[i,"nloptr_i",j] <- NA
else
ans[i,"nloptr_i",j] <- out$objective
## optim
out <- try(optim(par=par, fn=goTest, method="SANN",
control=list(maxit=10000),
fnName=objFun[i], checkDim=F))
if(class(out) == "try-error")
ans[i,"optim",j] <- NA
else
ans[i,"optim",j] <- out$value
## SCEoptim
out <- try(SCEoptim(par=par, FUN=goTest,
control=list(maxeval=10000),
fnName=objFun[i], checkDim=F))
if(class(out) == "try-error")
ans[i,"SCEoptim",j] <- NA
else
ans[i,"SCEoptim",j] <- out$value
## DEopt
out <- try(DEopt(OF=goTest, algo=list(min=bounds$lower, max=bounds$upper,
nG=200, minmaxConstr=TRUE),
fnName=objFun[i], checkDim=F))
if(class(out) == "try-error")
ans[i,"DEopt",j] <- NA
else
ans[i,"DEopt",j] <- out$OFvalue
## PSopt
out <- try(PSopt(OF=goTest, algo=list(min=bounds$lower, max=bounds$upper,
printBar=F, printDetail=F, nG=100),
fnName=objFun[i], checkDim=F))
if(class(out) == "try-error")
ans[i,"PSopt",j] <- NA
else
ans[i,"PSopt",j] <- out$OFvalue
## malschains
goTest1 <- function(par,fnName=objFun[i],checkDim=F)
goTest(par,fnName, checkDim)
out <- try(malschains(fn=goTest1, lower=bounds$lower,
upper=bounds$upper,
maxEvals=10000, trace=FALSE))
if(class(out) == "try-error")
ans[i,"malschains",j] <- NA
else
ans[i,"malschains",j] <- out$fitness
## hydroPSO
out <- try(hydroPSO(fn=goTest, lower=bounds$lower,
upper=bounds$upper,
control=list(maxfn=10000),
fnName=objFun[i], checkDim=F))
if(class(out) == "try-error")
ans[i,"hydroPSO",j] <- NA
else
ans[i,"hydroPSO",j] <- out$value
##
save(ans, file="Results.RData")
cat("Finished run", j, "under objective function", objFun[i], "\n")
}
}
ans
Zeldasine20(sum = valor, x = apply(cbind(rep(0,20),rep(pi,20)), 1, function(x){runif(1, x[1], x[2])}), N = 10)
valor
Zeldasine20(sum = valor, x = apply(cbind(rep(0,20),rep(pi,20)), 1, function(x){runif(1, x[1], x[2])}), N = 10)
valor
goTest(fnName = "Zeldasine20", par = apply(cbind(rep(0,20),rep(pi,20)), 1, function(x){runif(1, x[1], x[2])}), checkDim = FALSE)
goTest(fnName = "Zeldasine20", par = apply(cbind(rep(0,20),rep(pi,20)), 1, function(x){runif(1, x[1], x[2])}), checkDim = FALSE)
goTest(fnName = "Zeldasine20", par = apply(cbind(rep(0,20),rep(pi,20)), 1, function(x){runif(1, x[1], x[2])}), checkDim = FALSE)
goTest(fnName = "Zeldasine20", par = apply(cbind(rep(0,20),rep(pi,20)), 1, function(x){runif(1, x[1], x[2])}), checkDim = FALSE)
ans <- array(dim=c(length(objFun), length(funs), 100),
dimnames=list(objFun,funs, NULL))
for(i in 1:length(objFun)) {
for(j in 1:100) {
bounds <- getDefaultBounds(objFun[i])
bMat <- cbind(bounds$lower, bounds$upper)
par <- vector()
checkDim <- FALSE
for(ii in 1:length(bounds$lower))
par <- append(par,runif(1,bounds$lower[ii],bounds$upper[ii]))
## ga
goTestMin <- function(...)
-goTest(...)
out <- try(ga(type="real-valued", fitness=goTestMin,
fnName=objFun[i], checkDim=F,
min=bounds$lower, max=bounds$upper, maxiter=245))
if(class(out) == "try-error")
ans[i,"ga",j] <- NA
else
ans[i,"ga",j] <- -out@fitnessValue
## rgenoud
out <- try(genoud(fn=goTest, nvars=length(bounds$lower),
max.generations=11,
Domains = matrix(c(bounds$lower,bounds$upper),ncol=2),
boundary.enforcement=2,
fnName=objFun[i], checkDim=F))
if(class(out) == "try-error")
ans[i,"genoud",j] <- NA
else
ans[i,"genoud",j] <- out$value
##
#save(ans, file="Results.RData")
cat("Finished run", j, "under objective function", objFun[i], "\n")
}
}
ans
library(readr)
db_beta <- read_table2("inst/ext/instanciabeta.txt",
col_names = FALSE)
View(db_beta)
summary(db_beta)
library(castOpt)
valor = 0
reg_beta(sum = valor, x = rep(1,3), N = length(x), data = db_beta[,c(1,3)])
reg_beta(sum = valor, x = rep(1,3), N = 3, data = db_beta[,c(1,3)])
b_beta[,
c(1, 3)]
db_beta[, c(1, 3)]
library(castOpt)
reg_beta(sum = valor, x = rep(1,3), N = 3, data = db_beta[,c(1,3)])
reg_beta(sum = valor, x = rep(1,3), N = 3, data = as.matrix(db_beta[,c(1,3)]))
library(castOpt)
reg_beta(sum = valor, x = rep(1,3), N = 3, data = db_beta[,c(1,3)])
reg_beta(sum = valor, x = rep(1,3), N = 3, data = as.matrix(db_beta[,c(1,3)]))
library(castOpt)
reg_beta(sum = valor, x = rep(1,3), N = 3, data = as.matrix(db_beta[,c(1,3)]))
reg_beta(sum = valor, x = rep(1,3), N = 3, data = as.matrix(db_beta[,c(1,3)]))
library(castOpt)
Q
Q
library(castOpt)
reg_beta(sum = valor, x = rep(1,3), N = 3, data = as.matrix(db_beta[,c(1,3)]))
library(castOpt)
reg_beta(sum = valor, x = rep(1,3), N = 3, data = as.matrix(db_beta[,c(1,3)]))
valor
library(castOpt)
reg_beta(sum = {valor <- 0}, x = rep(1,3), N = 3, data = as.matrix(db_beta[,c(1,3)]))
valor
reg_beta(sum = {valor <- 0}, x = runif(3, min = 1, max = 2), N = 3, data = as.matrix(db_beta[,c(1,3)]))
valor
valor
reg_beta(sum = {valor <- 0}, x = runif(3, min = 1, max = 2), N = 3, data = as.matrix(db_beta[,c(1,3)]))
valor
RcppArmadillo::armadillo_version(single)
RcppArmadillo::armadillo_version()
RcppArmadillo::armadillo_version(single = TRUE)
install.packages(c("aqp", "bayesplot", "binman", "blogdown", "bridgesampling", "brms", "Brobdingnag", "broom", "callr", "carData", "caTools", "cli", "clipr", "coda", "commonmark", "crul", "data.table", "dbplyr", "devtools", "digest", "dotCall64", "dplyr", "DT", "dygraphs", "e1071", "emmeans", "evaluate", "ffbase", "FNN", "ggeffects", "ggplot2", "ggridges", "git2r", "glmmTMB", "glue", "googleAuthR", "googlePolylines", "googlesheets", "googleVis", "googleway", "gtools", "haven", "htmlwidgets", "httpuv", "igraph", "ipred", "iterators", "janitor", "jqr", "later", "lava", "leaflet", "lme4", "magick", "mapsapi", "MASS", "matrixStats", "microbenchmark", "mime", "modeltools", "mongolite", "nloptr", "openssl", "packrat", "pillar", "pkgconfig", "plotrix", "processx", "psych", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "readr", "reprex", "reshape", "rgbif", "rgdal", "rgeos", "RgoogleMaps", "RJSONIO", "rlang", "roxygen2", "rsconnect", "RSelenium", "rstan", "rstantools", "rstudioapi", "R.utils", "sandwich", "scales", "servr", "sf", "shiny", "shinyjqui", "shinythemes", "sjlabelled", "sjmisc", "sjPlot", "sjstats", "snakecase", "spacetime", "spam", "spData", "StanHeaders", "stringi", "subprocess", "survey", "tesseract", "testthat", "TH.data", "tidyr", "tidyselect", "tinytex", "TMB", "TTR", "tufte", "units", "urltools", "VGAM", "wdman", "xfun", "XML", "xtable", "xts", "yaml", "zoo"))
install.packages(c("aqp", "bayesplot", "binman", "blogdown", "bridgesampling", "brms", "Brobdingnag", "broom", "callr", "carData", "caTools", "cli", "clipr", "coda", "commonmark", "crul", "data.table", "dbplyr", "devtools", "digest", "dotCall64", "dplyr", "DT", "dygraphs", "e1071", "emmeans", "evaluate", "ffbase", "FNN", "ggeffects", "ggplot2", "ggridges", "git2r", "glmmTMB", "glue", "googleAuthR", "googlePolylines", "googlesheets", "googleVis", "googleway", "gtools", "haven", "htmlwidgets", "httpuv", "igraph", "ipred", "iterators", "janitor", "jqr", "later", "lava", "leaflet", "lme4", "magick", "mapsapi", "MASS", "matrixStats", "microbenchmark", "mime", "modeltools", "mongolite", "nloptr", "openssl", "packrat", "pillar", "pkgconfig", "plotrix", "processx", "psych", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "readr", "reprex", "reshape", "rgbif", "rgdal", "rgeos", "RgoogleMaps", "RJSONIO", "rlang", "roxygen2", "rsconnect", "RSelenium", "rstan", "rstantools", "rstudioapi", "R.utils", "sandwich", "scales", "servr", "sf", "shiny", "shinyjqui", "shinythemes", "sjlabelled", "sjmisc", "sjPlot", "sjstats", "snakecase", "spacetime", "spam", "spData", "StanHeaders", "stringi", "subprocess", "survey", "tesseract", "testthat", "TH.data", "tidyr", "tidyselect", "tinytex", "TMB", "TTR", "tufte", "units", "urltools", "VGAM", "wdman", "xfun", "XML", "xtable", "xts", "yaml", "zoo"))
install.packages(c("aqp", "bayesplot", "binman", "blogdown", "bridgesampling", "brms", "Brobdingnag", "broom", "callr", "carData", "caTools", "cli", "clipr", "coda", "commonmark", "crul", "data.table", "dbplyr", "devtools", "digest", "dotCall64", "dplyr", "DT", "dygraphs", "e1071", "emmeans", "evaluate", "ffbase", "FNN", "ggeffects", "ggplot2", "ggridges", "git2r", "glmmTMB", "glue", "googleAuthR", "googlePolylines", "googlesheets", "googleVis", "googleway", "gtools", "haven", "htmlwidgets", "httpuv", "igraph", "ipred", "iterators", "janitor", "jqr", "later", "lava", "leaflet", "lme4", "magick", "mapsapi", "MASS", "matrixStats", "microbenchmark", "mime", "modeltools", "mongolite", "nloptr", "openssl", "packrat", "pillar", "pkgconfig", "plotrix", "processx", "psych", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "readr", "reprex", "reshape", "rgbif", "rgdal", "rgeos", "RgoogleMaps", "RJSONIO", "rlang", "roxygen2", "rsconnect", "RSelenium", "rstan", "rstantools", "rstudioapi", "R.utils", "sandwich", "scales", "servr", "sf", "shiny", "shinyjqui", "shinythemes", "sjlabelled", "sjmisc", "sjPlot", "sjstats", "snakecase", "spacetime", "spam", "spData", "StanHeaders", "stringi", "subprocess", "survey", "tesseract", "testthat", "TH.data", "tidyr", "tidyselect", "tinytex", "TMB", "TTR", "tufte", "units", "urltools", "VGAM", "wdman", "xfun", "XML", "xtable", "xts", "yaml", "zoo"))
